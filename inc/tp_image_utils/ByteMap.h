#ifndef tp_image_utils_ByteMap_h
#define tp_image_utils_ByteMap_h

#include "tp_image_utils/Globals.h"

#include <vector>
#include <stdint.h>

namespace tp_image_utils
{
class ColorMap;

//##################################################################################################
class ByteMap
{
public:
  //################################################################################################
  ByteMap(size_t w=0, size_t h=0);

  //################################################################################################
  explicit ByteMap(const ColorMap& img);

  //################################################################################################
  void fill(uint8_t value);

  //################################################################################################
  const uint8_t* constData() const;

  //################################################################################################
  uint8_t* data();

  //################################################################################################
  size_t width() const;

  //################################################################################################
  size_t height() const;

  //################################################################################################
  size_t size() const;

  //################################################################################################
  void setPixel(size_t x, size_t y, uint8_t value);

  //################################################################################################
  uint8_t pixel(size_t x, size_t y, uint8_t defaultValue=0) const;

  //################################################################################################
  ColorMap toImage() const;

  //################################################################################################
  ByteMap subImage(size_t left, size_t top, size_t right, size_t bottom) const;

  //################################################################################################
  //! Rotate the image 90 degrees clockwise
  ByteMap rotate90CW() const;

  //################################################################################################
  //! Rotate the image 90 degrees counter clockwise
  ByteMap rotate90CCW() const;

  //################################################################################################
  std::vector<uint8_t> extractRow(size_t y) const;

  //################################################################################################
  std::vector<uint8_t> extractColumn(size_t x) const;

  //################################################################################################
  void setRow(size_t y, const std::vector<uint8_t>& values);

  //################################################################################################
  void setColumn(size_t x, const std::vector<uint8_t>& values);

private:
  std::vector<uint8_t> m_data;
  size_t m_width;
  size_t m_height;
};
}

#endif
